#import "LevelStateDelegate.h"

#define MAKE_TEXT_1(body) MakeSprite(0, 0, 9, 1, body, 0, 0)
#define MAKE_TEXT_2(body) MakeSprite(0, 1, 11, 1, body, 0, 0)
#define MAKE_TEXT_3(body) MakeSprite(0, 2, 10, 1, body, 0, 0)
#define MAKE_TEXT_4(body) MakeSprite(0, 3, 7, 1, body, 0, 0)
#define MAKE_TEXT_5(body) MakeSprite(0, 4, 6, 1, body, 0, 0)

typedef struct touch {
	int x, y, ticks;
} touch;

touch touches[] = {
	{ 90, 158, 206}, 
	{ 90, 155, 211}, 
	{ 93, 150, 212}, 
	{ 97, 145, 212}, 
	{100, 140, 214}, 
	{102, 137, 214}, 
	{105, 132, 216}, 
	{111, 127, 216}, 
	{117, 119, 218}, 
	{123, 112, 218}, 
	{127, 109, 220}, 
	{128, 108, 220}, 
	{129, 107, 222}, 
	{131, 104, 222}, 
	{133, 101, 224}, 
	{136,  98, 224}, 
	{136,  97, 226}, 
	{138,  97, 226}, 
	{139,  97, 228}, 
	{141,  95, 230}, 
	{144,  94, 232}, 
	{146,  94, 234}, 
	{147,  94, 236}, 
	{149,  94, 236}, 
	{152,  94, 238}, 
	{158,  96, 238}, 
	{164, 100, 240}, 
	{168, 103, 240}, 
	{173, 106, 242}, 
	{180, 111, 242}, 
	{184, 114, 244}, 
	{188, 116, 244}, 
	{193, 121, 246}, 
	{196, 124, 246}, 
	{200, 130, 248}, 
	{205, 139, 248}, 
	{211, 152, 250}, 
	{214, 161, 250}, 
	{216, 166, 252}, 
	{217, 168, 252}, 
	{217, 171, 254}, 
	{217, 172, 256}, 
	{217, 174, 256}, 
	{216, 179, 258}, 
	{213, 189, 258}, 
	{210, 198, 260}, 
	{207, 206, 260}, 
	{204, 215, 262}, 
	{200, 223, 262}, 
	{194, 233, 264}, 
	{187, 245, 264}, 
	{179, 256, 266}, 
	{171, 270, 266}, 
	{167, 278, 268}, 
	{163, 285, 268}, 
	{159, 291, 270}, 
	{154, 298, 270}, 
	{149, 306, 272}, 
	{144, 315, 272}, 
	{138, 322, 274}, 
	{134, 326, 274}, 
	{131, 327, 277}, 
	{127, 329, 277}, 
	{121, 329, 279}, 
	{111, 329, 279}, 
	{105, 329, 281}, 
	{101, 329, 281}, 
	{ 98, 329, 282}, 
	{ 93, 326, 282}, 
	{ 87, 322, 284}, 
	{ 82, 317, 284}, 
	{ 77, 312, 286}, 
	{ 73, 307, 286}, 
	{ 70, 302, 288}, 
	{ 66, 296, 288}, 
	{ 62, 288, 290}, 
	{ 58, 280, 290}, 
	{ 55, 272, 292}, 
	{ 50, 259, 292}, 
	{ 46, 242, 294}, 
	{ 45, 231, 294}, 
	{ 45, 223, 296}, 
	{ 45, 217, 296}, 
	{ 45, 215, 298}, 
	{ 46, 212, 298}, 
	{ 48, 205, 300}, 
	{ 54, 196, 300}, 
	{ 57, 190, 302}, 
	{ 60, 180, 302}, 
	{ 63, 175, 304}, 
	{ 64, 171, 304}, 
	{ 66, 166, 306}, 
	{ 69, 160, 306}, 
	{ 71, 154, 308}, 
	{ 75, 151, 308}, 
	{ 75, 150, 310}, 
	{ 77, 150, 310}, 
	{ 78, 150, 312}, 
	{ 83, 150, 312}, 
	{ 87, 150, 314}, 
	{ 93, 150, 314}, 
	{103, 152, 316}, 
	{107, 154, 316}, 
	{112, 156, 318}, 
	{116, 157, 318}, 
	{121, 158, 320}, 
	{127, 160, 320}, 
	{131, 162, 322}, 
	{132, 163, 322}, 
	{133, 163, 324}, 
	{133, 164, 324}, 
	{134, 165, 326}, 
	{135, 166, 328}, 
	{137, 169, 330}, 
	{138, 171, 331}, 
	{139, 173, 331}, 
	{139, 175, 333}, 
	{140, 177, 333}, 
	{140, 178, 335}, 
	{140, 179, 335}, 
	{141, 181, 337}, 
	{141, 182, 339}, 
	{141, 183, 341}, 
	{141, 184, 343}, 
	{141, 185, 344}, 
	{141, 187, 344}, 
	{140, 189, 346}, 
	{139, 191, 346}, 
	{139, 193, 348}, 
	{138, 195, 348}, 
	{138, 197, 350}, 
	{138, 198, 350}, 
	{138, 199, 352}, 
	{138, 200, 354}, 
	{138, 201, 357}, 
	{138, 203, 357}, 
	{138, 204, 358}, 
	{138, 205, 360}, 
	{138, 206, 360}, 
	{138, 207, 362}, 
	{138, 208, 365}, 
	{138, 209, 369}, 
	{138, 210, 370}, 
	{138, 211, 372}, 
	{138, 212, 374}, 
	{137, 214, 376}, 
	{137, 215, 378}, 
	{137, 216, 380}, 
	{136, 216, 381}, 
	{136, 218, 381}, 
	{136, 219, 383}, 
	{136, 221, 385}, 
	{136, 222, 386}, 
	{136, 223, 386}, 
	{136, 225, 388}, 
	{135, 228, 390}, 
	{135, 229, 391}, 
	{133, 229, 391}, 
	{133, 230, 393}, 
	{133, 231, 395}, 
	{133, 232, 396}, 
	{133, 233, 398}, 
	{133, 235, 400}, 
	{133, 238, 400}, 
	{133, 241, 402}, 
	{134, 244, 402}, 
	{134, 251, 404}, 
	{135, 257, 404}, 
	{135, 260, 406}, 
	{136, 265, 406}, 
	{137, 268, 408}, 
	{137, 271, 408}, 
	{137, 272, 410}, 
	{137, 274, 410}, 
	{137, 275, 412}, 
	{139, 275, 412}, 
	{139, 276, 414}, 
	{139, 280, 414}, 
	{140, 282, 416}, 
	{140, 284, 416}, 
	{140, 287, 418}, 
	{140, 288, 420}, 
	{140, 289, 422}, 
	{140, 290, 424}, 
	{140, 291, 424}, 
	{140, 293, 426}, 
	{140, 294, 426}, 
	{140, 296, 428}, 
	{140, 298, 430}, 
	{140, 300, 430}, 
	{140, 302, 432}, 
	{140, 304, 432}, 
	{140, 305, 434}, 
	{140, 306, 434}, 
	{140, 308, 436}, 
	{140, 309, 438}, 
	{140, 310, 440}, 
	{140, 311, 441}, 
	{140, 313, 441}, 
	{140, 315, 443}, 
	{140, 317, 443}, 
	{140, 320, 445}, 
	{140, 322, 445}, 
	{140, 324, 447}, 
	{140, 325, 447}, 
	{140, 326, 449}, 
	{140, 328, 451}, 
	{140, 329, 453}, 
	{140, 330, 454}, 
	{140, 331, 454}, 
	{140, 332, 456}, 
	{140, 333, 458}, 
	{140, 334, 460}, 
	{140, 335, 460}, 
	{140, 337, 462}, 
	{140, 338, 462}, 
	{139, 339, 464}, 
	{139, 340, 464}, 
	{139, 341, 466}, 
	{139, 343, 466}, 
	{139, 344, 468}, 
	{138, 346, 468}, 
	{138, 348, 470}, 
	{137, 352, 470}, 
	{136, 358, 472}, 
	{136, 359, 474}, 
	{136, 360, 476}, 
	{135, 360, 478}, 
	{135, 362, 480}, 
	{135, 363, 482}, 
	{135, 364, 485}, 
	{135, 365, 487}, 
	{134, 365, 502}, 
	{134, 364, 502}, 
	{134, 363, 504}, 
	{133, 362, 506}, 
	{133, 361, 508}, 
	{133, 360, 508}, 
	{133, 359, 509}, 
	{132, 356, 509}, 
	{132, 354, 511}, 
	{131, 350, 513}, 
	{131, 348, 515}, 
	{131, 347, 515}, 
	{131, 344, 516}, 
	{131, 340, 516}, 
	{130, 335, 518}, 
	{130, 332, 518}, 
	{130, 330, 520}, 
	{130, 328, 522}, 
	{130, 327, 524}, 
	{130, 326, 524}, 
	{130, 325, 525}, 
	{130, 324, 527}, 
	{130, 323, 527}, 
	{130, 319, 529}, 
	{130, 317, 529}, 
	{130, 314, 532}, 
	{130, 313, 532}, 
	{130, 311, 533}, 
	{130, 310, 533}, 
	{130, 309, 535}, 
	{130, 308, 537}, 
	{130, 306, 537}, 
	{130, 305, 539}, 
	{130, 303, 541}, 
	{130, 302, 541}, 
	{130, 300, 543}, 
	{129, 297, 545}, 
	{128, 293, 545}, 
	{127, 286, 547}, 
	{126, 281, 547}, 
	{126, 279, 549}, 
	{126, 277, 551}, 
	{126, 276, 553}, 
	{126, 275, 554}, 
	{126, 274, 558}, 
	{126, 273, 561}, 
	{126, 272, 563}, 
	{126, 271, 564}, 
	{126, 270, 566}, 
	{126, 267, 568}, 
	{126, 264, 568}, 
	{127, 257, 570}, 
	{127, 255, 570}, 
	{127, 253, 572}, 
	{128, 253, 594}, 
	{128, 255, 596}, 
	{131, 261, 598}, 
	{134, 267, 598}, 
	{135, 270, 599}, 
  { 93, 313, 743}, 
	{ 96, 313, 748}, 
	{106, 314, 749}, 
	{116, 314, 749}, 
	{129, 312, 751}, 
	{134, 311, 751}, 
	{136, 311, 753}, 
	{137, 311, 753}, 
	{138, 311, 755}, 
	{140, 311, 755}, 
	{141, 311, 757}, 
	{142, 311, 760}, 
	{143, 311, 764}, 
	{145, 315, 764}, 
	{147, 318, 765}, 
	{150, 324, 765}, 
	{152, 327, 767}, 
	{153, 330, 767}, 
	{153, 331, 769}, 
	{153, 332, 771}, 
	{153, 333, 776}, 
	{153, 334, 776}, 
	{151, 340, 777}, 
	{150, 343, 777}, 
	{149, 346, 779}, 
	{149, 347, 781}, 
	{147, 347, 783}, 
	{146, 348, 785}, 
	{146, 349, 787}, 
	{0,0,0}, 
};

GLuint
loadPNG(NSString *name);

@implementation LevelTutorial

+ (NSString *)levelName {
	return @"Tutorial";
}

- (id)init {
	if(self = [super init]){
    tutorialTextTexture = loadPNG(@"tutorialText.png");
    uiTutorialText = [[NSMutableArray alloc] init];

		handBody = [[ChipmunkBody alloc] initWithMass:INFINITY andMoment:INFINITY];
		handBody.pos = cpv(-100, -100);
	
		[sprites addObject:SpriteOffset(MakeSprite(5, 6, 1, 1, handBody, 0, 0), cpv(0, -15))];
    
    text1Body = [[ChipmunkBody alloc] initWithMass:INFINITY andMoment:INFINITY];
		text1Body.pos = cpv(-100, -100);
		[uiTutorialText addObject:MAKE_TEXT_1(text1Body)];

    text2Body = [[ChipmunkBody alloc] initWithMass:INFINITY andMoment:INFINITY];
		text2Body.pos = cpv(-100, -100);
		[uiTutorialText addObject:MAKE_TEXT_2(text2Body)];
    
    text3Body = [[ChipmunkBody alloc] initWithMass:INFINITY andMoment:INFINITY];
		text3Body.pos = cpv(-100, -100);
		[uiTutorialText addObject:MAKE_TEXT_3(text3Body)];

    text4Body = [[ChipmunkBody alloc] initWithMass:INFINITY andMoment:INFINITY];
		text4Body.pos = cpv(-100, -100);
		[uiTutorialText addObject:MAKE_TEXT_4(text4Body)];

    text5Body = [[ChipmunkBody alloc] initWithMass:INFINITY andMoment:INFINITY];
		text5Body.pos = cpv(-100, -100);
		[uiTutorialText addObject:MAKE_TEXT_5(text5Body)];
    
    [uiSprites removeAllObjects];
	}
	
	return self;
}

- (void) dealloc
{
  glDeleteTextures(1, &tutorialTextTexture);
  [super dealloc];
}


- (void)update {
	while(touches[lastTouchIndex].ticks == ticks){
		cpVect pos = cpv(touches[lastTouchIndex].x, touches[lastTouchIndex].y);
		[super touchMoved:pos];
		handBody.pos = cpv(pos.y, pos.x);
		lastTouchIndex++;
	}
	
	if(ticks == 623 || ticks == 806){
		[super touchUp];
		handBody.pos = cpv(-100, -100);
	}

  cpVect uiPos = cpv(290, 260);
  
  if(ticks == 60){
    text1Body.pos = uiPos;
  }  
  if(ticks == 180){
    text1Body.pos = cpv(-100, -100);
    text2Body.pos = uiPos;
  }
  if(ticks == 360){
    text2Body.pos = cpv(-100, -100);
    text3Body.pos = uiPos;
  }
  if(ticks == 480){
    text3Body.pos = cpv(-100, -100);
    text4Body.pos = uiPos;
  }
  if(ticks == 720){
    text4Body.pos = cpv(-100, -100);
    text5Body.pos = uiPos;
  }
  if(ticks == 840){
    text5Body.pos = cpv(-100, -100);
  }
	
	[super update];
}

+ (medalType)medal {
	return medalGold;
}

- (void)draw {
	[super draw];
  
  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	glEnable(GL_BLEND);
	glEnable(GL_TEXTURE_2D);
  
	[self renderArrow];
  
  glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
  glBindTexture(GL_TEXTURE_2D, tutorialTextTexture);
	glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);

	renderSprites(uiTutorialText, ticks);
}

- (void)renderNumber:(int)num at:(cpVect)pos {
  // Overridden to hide the stroke count.
  if(completedTicks){
    [super renderNumber:num at:pos];
  }
}


- (void)touchUp {
//	printf("touchUp %d", ticks);
	if(completedTicks)
	[super touchUp];
}

- (void)touchMoved:(cpVect)pos {
//	printf("\t{%3d, %3d, %3d},", (int)pos.x, (int)pos.y, ticks);
	if(completedTicks)
	[super touchMoved:pos];
}

@end
